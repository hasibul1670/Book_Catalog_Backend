// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  name       String
  userId     String?
  email      String
  password   String
  role       String
  contactNo  String
  address    String
  profileImg String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  review     Review[]
  orderId    String?
  Order      Order[]

  @@unique([email], name: "unique_user")
  @@map("user")
}

model Category {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Book      Book[]

  @@unique([title], name: "unique_category")
  @@map("category")
}

model Book {
  id              String        @id @default(uuid())
  title           String
  author          String?
  price           Float?
  genre           String?
  publicationDate DateTime?
  createdAt       DateTime?     @default(now())
  updatedAt       DateTime?     @updatedAt
  Review          Review[]
  OrderedBook     OrderedBook[]

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  @@unique([title], name: "unique_book")
  @@map("books")
}

model Review {
  id        String   @id @default(uuid())
  review    String
  rating    Int
  userId    String
  bookId    String
  user      User     @relation(fields: [userId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("review")
}

model Order {
  id           String       @id @default(uuid())
  userId       String
  orderedBooks OrderedBook  @relation(fields: [orderedId], references: [id])
  customer     User         @relation(fields: [userId], references: [id])
  orderedId    String
  status       OrderStatus? @default(pending)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@unique([orderedId], name: "unique_orderedId")
  @@map("order")
}

model OrderedBook {
  id        String   @id @default(uuid())
  quantity  String
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]

  @@map("orderedBook")
}

enum OrderStatus {
  pending
  shipped
  delivered
  canceled
}
